#+title: bisos.vagrantBaseBoxes: Facilities for Creating and Managing Vagrant Packer Base Boxes
#+DATE: <2024-02-19 Mon 16:27>
#+AUTHOR: Mohsen BANAN
#+OPTIONS: toc:4

#+BEGIN: b:org:pypi:readme/topControls :pkgName "vagrantBaseBoxes" :comment "basic"

|----------------------+------------------------------------------------------------------|
| ~Blee Panel Controls~: | [[elisp:(show-all)][Show-All]] : [[elisp:(org-shifttab)][Overview]] : [[elisp:(progn (org-shifttab) (org-content))][Content]] : [[elisp:(delete-other-windows)][(1)]] : [[elisp:(progn (save-buffer) (kill-buffer))][S&Q]] : [[elisp:(save-buffer)][Save]]  : [[elisp:(kill-buffer)][Quit]]  : [[elisp:(bury-buffer)][Bury]] |
| ~Panel Links~:         | [[file:./py3/panels/bisos.facter/_nodeBase_/fullUsagePanel-en.org][Repo Blee Panel]] --  [[file:/bisos/git/auth/bxRepos/bisos-pip/facter/py3/panels/bisos.facter/_nodeBase_/fullUsagePanel-en.org][Blee Panel]]                                                |
| ~See Also~:            | [[https://pypi.org/project/bisos.facter][At PYPI]] : [[https://github.com/bisos-pip/pycs][bisos.PyCS]]                                             |
|----------------------+------------------------------------------------------------------|

#+END:

* Overview

/bisos.vagrantBaseBoxes/ provides access to vagrantBaseBoxes information through python.

bisos.vagrantBaseBoxes is a python package that uses the  [[https://github.com/bisos-pip/pycs][PyCS-Framework]] for adoption and
adaptation of *vagrantBaseBoxes* to python and PyCS-Framework. It is a BISOS-Capability and
a Standalone-BISOS-Package.

/bisos.vagrantBaseBoxes/ is based on the [[https://github.com/bisos-pip/b][PyCS-Foundation]] and can be used both as a Command
and as a Service (invoke/perform model of remote operations using [[https://github.com/tomerfiliba-org/rpyc][RPyC]]). Use of
bisos.vagrantBaseBoxes as a service, can facilitate central management of multiple
systems.

#+BEGIN: b:org:pypi:readme/pkgDocumentation :pkgName "capability-cs" :comment "basic"

# PYPI Documentation Comes Here in _description.org
#+END:


* Table of Contents     :TOC:
- [[#overview][Overview]]
- [[#about-vagrantbaseboxes][About vagrantBaseBoxes]]
- [[#part-of-bisos-----bystar-internet-services-operating-system][Part of BISOS --- ByStar Internet Services Operating System]]
- [[#bisosvagrantbaseboxes-is-a-command-services-pycs-facility][bisos.vagrantBaseBoxes is a Command-Services PyCS Facility]]
- [[#bisosvagrantbaseboxes-as-a-standalone-piece-of-bisos][bisos.vagrantBaseBoxes as a Standalone Piece of BISOS]]
- [[#installation][Installation]]
  - [[#installation-with-pip][Installation With pip]]
  - [[#installation-with-pipx][Installation With pipx]]
  - [[#post-installation-basic-testing][Post Installation Basic Testing]]
- [[#usage][Usage]]
  - [[#local-usage-system-command-line][Local Usage (system command-line)]]
  - [[#remote-usage-as-a-service----performerinvoker][Remote Usage (as a service -- Performer+Invoker)]]
    - [[#performer][Performer]]
    - [[#invoker][Invoker]]
  - [[#use-by-python-script][Use by python script]]
- [[#bisosvagrantbaseboxes-as-an-example-of-command-services-pycs----code-walkthrough][bisos.vagrantBaseBoxes as an Example of Command Services (PyCS) -- Code Walkthrough]]
  - [[#py3binfactercs--binfacter-roperfcs--binfacter-roinvcs][./py3/bin/facter.cs  (./bin/facter-roPerf.cs  ./bin/facter-roInv.cs)]]
  - [[#py3bisosfacterfacterpy-comeega-python][./py3/bisos/facter/facter.py (COMEEGA Python)]]
  - [[#py3bisosfacterfacter_convpy-conventional-python][./py3/bisos/facter/facter_conv.py (Conventional Python)]]
  - [[#py3bisosfacterfacter_csupy][./py3/bisos/facter/facter_csu.py]]
  - [[#pypi-and-github-packaging][PyPi and Github Packaging]]
- [[#documentation-and-blee-panels][Documentation and Blee-Panels]]
  - [[#bisosvagrantbaseboxes-blee-panels][bisos.vagrantBaseBoxes Blee-Panels]]
- [[#support][Support]]
- [[#planned-improvements][Planned Improvements]]

* About vagrantBaseBoxes

[[https://www.puppet.com/docs/puppet/7/facter.html][VagrantBaseBoxes]]  is part of [[https://www.puppet.com/][puppet]], but it can also be used without puppet.
VagrantBaseBoxes gathers information about the system as sets of hierarchical variables.

To install vagrantBaseBoxes:

#+begin_src bash
sudo apt-get install -y vagrantBaseBoxes
#+end_src

VagrantBaseBoxes is a ruby package. This bisos.vagrantBaseBoxes python package provides access to
vagrantBaseBoxes information through python both locally and remotely.

* Part of BISOS --- ByStar Internet Services Operating System

Layered on top of Debian, *BISOS*: (By* Internet Services Operating System) is a
unified and universal framework for developing both internet services and
software-service continuums that use internet services. See [[https://github.com/bxGenesis/start][Bootstrapping
ByStar, BISOS and Blee]] for information about getting started with BISOS.\\
*BISOS* is a foundation for *The Libre-Halaal ByStar Digital Ecosystem* which is
described as a cure for losses of autonomy and privacy in a book titled: [[https://github.com/bxplpc/120033][Nature
of Polyexistentials]]

/bisos.vagrantBaseBoxes/ is part of BISOS. Within BISOS, [[bisos.cmdb]] uses bisos.vagrantBaseBoxes for
Configuration Management DataBase purposes.

* bisos.vagrantBaseBoxes is a Command-Services PyCS Facility

bisos.vagrantBaseBoxes can be used locally on command-line or remotely as a service.
bisos.vagrantBaseBoxes is a PyCS multi-unit command-service.
PyCS is a framework that converges development of CLI and Services.
PyCS is an alternative to FastAPI, Typer and Click.

bisos.vagrantBaseBoxes uses the PyCS-Framework to:

1) Provide access to facter facilities through native python.
2) Provide local access to facter facilities on CLI.
3) Provide remote access to facter facilities through remote invocation of
   python Expectation Complete Operations using [[https://github.com/tomerfiliba-org/rpyc][rpyc]].
4) Provide remote access to facter facilities on CLI.

What is unique in the PyCS-Framework is that these four models are all
a single abstraction.

The core of PyCS-Framework is the /bisos.b/ package (the PyCS-Foundation).
See https://github.com/bisos-pip/b for an overview.

* bisos.vagrantBaseBoxes as a Standalone Piece of BISOS

bisos.vagrantBaseBoxes is a standalone piece of BISOS. It can be used as a self-contained
Python package separate from BISOS. Follow the installation and usage
instructions below for your own use.


* Installation

The sources for the bisos.vagrantBaseBoxes pip package are maintained at:
https://github.com/bisos-pip/facter.

The bisos.vagrantBaseBoxes pip package is available at PYPI as
https://pypi.org/project/bisos.vagrantBaseBoxes

You can install bisos.vagrantBaseBoxes with pip or pipx.

** Installation With pip

If you need access to bisos.vagrantBaseBoxes as a python module, you can install it with pip:

#+begin_src bash
pip install bisos.vagrantBaseBoxes
#+end_src

** Installation With pipx

If you only need access to bisos.vagrantBaseBoxes on command-line, you can install it with pipx:

#+begin_src bash
pipx install bisos.vagrantBaseBoxes
#+end_src

The following commands are made available:
- facter.cs
- facter-roInv.cs
- facter-roPerf.cs

These are all one file with 3 names. _facter-roInv.cs_ and _facter-roPerf.cs_ are sym-links to _facter.cs_

** Post Installation Basic Testing

After the installation, run some basic tests:

#+begin_src bash
facter.cs
facter networking.interfaces.lo.bindings
#+end_src


* Usage

** Local Usage (system command-line)

=facter.cs= does the equivalent of facter.

#+begin_src bash
bin/facter.cs
#+end_src

** Remote Usage (as a service -- Performer+Invoker)

You can also run:


*** Performer

Invoke performer as:

#+begin_src bash
bin/facter-roPerf.cs
#+end_src

*** Invoker

#+begin_src bash
bin/facter-roInv.cs
#+end_src

** Use by python script

bisos.vagrantBaseBoxes Source Code is in written in COMEEGA (Collaborative Org-Mode Enhanced Emacs Generalized Authorship) -- https://github.com/bx-blee/comeega.

The primary API for bisos.vagrantBaseBoxes is [[file:./py3/bisos/facter/facter_csu.py]]. It is self documented in COMEEGA.

* bisos.vagrantBaseBoxes as an Example of Command Services (PyCS) -- Code Walkthrough

An overview of the relevant files of the bisos.vagrantBaseBoxes package is provided below.

** ./py3/bin/facter.cs  (./bin/facter-roPerf.cs  ./bin/facter-roInv.cs)

The file [[file:./py3/bin/facter.cs]] is a CS-MU (Command-Services Multi-Unit).
It is fundamentally a boiler plate that has the main framework org-mode Dynamic Block and
which imports its commands from bisos.vagrantBaseBoxes.facter_csu and bisos.banna.bannaPortNu modules.

** ./py3/bisos/facter/facter.py (COMEEGA Python)

The file [[file:./py3/bisos/facter/facter.py]] includes functions that run a sub-process with "facter --json",
obtain the json result as a collection of namedtuples. This can then be subjected to caching and
then retrieved based on string representations mapping to namedtuples.

** ./py3/bisos/facter/facter_conv.py (Conventional Python)

The file [[file:./py3/bisos/facter/facter_conv.py]] is same as  [[file:./py3/bisos/facter/facter.py]]
without use of COMEEGA. Without Emacs, it is not easy to read the COMEEGA files and some people
prefer not to use or know about COMEEGA. In such situations facter_conv.py can be considered as
conventional sample code.

** ./py3/bisos/facter/facter_csu.py

The file [[file:./py3/bisos/facter/facter_csu.py]] is a CS-U (Command-Services Unit).
It includes definitions of commands and their CLI params and args.

Implementation of commands in facter_csu.py rely on facilities provided in facter.py.

** PyPi and Github Packaging

All bisos-pip repos in the https://github.com/bisos-pip github organization follow the same structure.
They all have [[file:./py3/setup.py]] files that are driven by [[file:./py3/pypiProc.sh]].

The [[file:./py3/setup.py]] file is a series of consistent org-mode Dynamic Block
that automatically determine the module name and the installed and pypi revisions.

The [[file:./py3/pypiProc.sh]] uses setup.py and pushes to pypi when desired and
allows for isolated testing using pipx.

* Documentation and Blee-Panels

bisos.vagrantBaseBoxes is part of ByStar Digital Ecosystem [[http://www.by-star.net]].

This module's primary documentation is in the form of Blee-Panels.
Additional information is also available in: [[http://www.by-star.net/PLPC/180047]]

** bisos.vagrantBaseBoxes Blee-Panels

bisos.vagrantBaseBoxes Blee-Panles are in ./panels directory.
From within Blee and BISOS these panles are accessible under the
Blee "Panels" menu.

See [[file:./py3/panels/_nodeBase_/fullUsagePanel-en.org]] for a starting point.

* Support

For support, criticism, comments and questions; please contact the
author/maintainer\\
[[http://mohsen.1.banan.byname.net][Mohsen Banan]] at:
[[http://mohsen.1.banan.byname.net/contact]]


* Planned Improvements

One material use of bisos.vagrantBaseBoxes is to facilitate developement of an automated
Configuration Management DataBase (CMDB) as a centralized facility that
organizes information about system, including the relationships between
hardware, software, and networks. On a per-system base, bisos.vagrantBaseBoxes can obtain
much of that information and through PyCS it can deliver that information
remotely to centralized CMDBs. In this context CMDBs generally function as
invokers and we need to facilitate ever present bisos.vagrantBaseBoxes performers.

The CMDB invoker part is implemented as bisos.cmdb.

Each BISOS platform needs to run an instance under systemd.
I have done something similar to this for bisos.marmee.
That piece need to be absorbed.

# Local Variables:
# eval: (setq-local toc-org-max-depth 4)
# End:
