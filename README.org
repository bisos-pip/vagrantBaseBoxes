#+title: bisos.vagrantBaseBoxes: Facilities for Creating and Managing Vagrant Packer Base Boxes
#+DATE: <2024-02-19 Mon 16:27>
#+AUTHOR: Mohsen BANAN
#+OPTIONS: toc:4

#+BEGIN: b:org:pypi:readme/topControls :pkgName "vagrantBaseBoxes" :comment "basic"

|----------------------+------------------------------------------------------------------|
| ~Blee Panel Controls~: | [[elisp:(show-all)][Show-All]] : [[elisp:(org-shifttab)][Overview]] : [[elisp:(progn (org-shifttab) (org-content))][Content]] : [[elisp:(delete-other-windows)][(1)]] : [[elisp:(progn (save-buffer) (kill-buffer))][S&Q]] : [[elisp:(save-buffer)][Save]]  : [[elisp:(kill-buffer)][Quit]]  : [[elisp:(bury-buffer)][Bury]] |
| ~Panel Links~:         | [[file:./py3/panels/bisos.facter/_nodeBase_/fullUsagePanel-en.org][Repo Blee Panel]] --  [[file:/bisos/git/auth/bxRepos/bisos-pip/facter/py3/panels/bisos.facter/_nodeBase_/fullUsagePanel-en.org][Blee Panel]]                                                |
| ~See Also~:            | [[https://pypi.org/project/bisos.facter][At PYPI]] : [[https://github.com/bisos-pip/pycs][bisos.PyCS]]                                             |
|----------------------+------------------------------------------------------------------|

#+END:

* Overview

/bisos.vagrantBaseBoxes/ provides various facilities for creation and management of
Vagrant Packer Base Boxes.

/bisos.vagrantBaseBoxes/ is a python package that uses the [[https://github.com/bisos-pip/pycs][PyCS-Framework]] for its
implementation. It is a BISOS-Capability and a Standalone-BISOS-Package.


The driven approach involves separation of packer specifications from the
bisos.vagrantBaseBoxes package. BISOS related packer specifications that can be
processed with bisos.vagrantBaseBoxes are at:\
[[https://github.com/bxObjects/bro_vagrantDebianBaseBoxes]]

#+BEGIN: b:org:pypi:readme/pkgDocumentation :pkgName "capability-cs" :comment "basic"

# PYPI Documentation Comes Here in _description.org
#+END:


* Table of Contents     :TOC:
- [[#overview][Overview]]
- [[#standalone-piece-of-bisos-----bystar-internet-services-operating-system][Standalone Piece of BISOS --- ByStar Internet Services Operating System]]
- [[#prior-art-and-similar-art][Prior Art and Similar Art]]
- [[#strategy-of-separating-bisosvagrantbaseboxes-package-from-its-data-packer-base-box-specifications][Strategy of Separating bisos.vagrantBaseBoxes Package From Its Data (packer base box specifications)]]
  - [[#user-orientation-strategy][User Orientation Strategy]]
  - [[#framework-for-consolidation-of-base-boxes-strategy][Framework for Consolidation of Base Boxes Strategy]]
  - [[#bisos-vagrant-debian-base-boxes-packer-specifications][BISOS Vagrant Debian Base Boxes Packer Specifications]]
- [[#installation-of-bisosvagrantbaseboxes-package][Installation of bisos.vagrantBaseBoxes Package]]
  - [[#installation-with-pip][Installation With pip]]
  - [[#installation-with-pipx][Installation With pipx]]
- [[#usage-of-bisosvagrantbaseboxes-package][Usage of bisos.vagrantBaseBoxes Package]]
  - [[#first-install-the-packer-box-specifications][First Install the packer box specifications.]]
  - [[#vagrantboxproccs-menu][vagrantBoxProc.cs Menu]]
  - [[#build-add-run-and-then-clean-all-base-boxes-with-vagrantboxproccs][Build, Add, Run and then Clean All Base Boxes with vagrantBoxProc.cs]]
  - [[#build-add-run-and-then-clean-a-specific-base-box-with-vagboxcs-a-planted-vagrantboxproccs-seed][Build, Add, Run and then Clean a Specific Base Box with vagBox.cs (a planted vagrantBoxProc.cs seed)]]
- [[#bisos-use-of-built-vagrant-boxes][BISOS Use of Built Vagrant Boxes]]
- [[#support][Support]]
- [[#planned-improvements][Planned Improvements]]

* Standalone Piece of BISOS --- ByStar Internet Services Operating System

Layered on top of Debian, *BISOS*: (By* Internet Services Operating System) is a
unified and universal framework for developing both internet services and
software-service continuums that use internet services. See [[https://github.com/bxGenesis/start][Bootstrapping
ByStar, BISOS and Blee]] for information about getting started with BISOS.\\
*BISOS* is a foundation for *The Libre-Halaal ByStar Digital Ecosystem* which is
described as a cure for losses of autonomy and privacy in a book titled: [[https://github.com/bxplpc/120033][Nature
of Polyexistentials]]

bisos.vagrantBaseBoxes is a standalone piece of BISOS. It can be used as a self-contained
Python package separate from BISOS. Follow the installation and usage
instructions below for your own use.

* Prior Art and Similar Art

Use of Vagrant Base Boxes is quite common.

The model of using existing base boxes by downloading them from the web is
problematic for us, as it involves a level of trust which we consider unnecessary.
Hashicorp provides a collection of boxes at:\
https://developer.hashicorp.com/vagrant/docs/boxes

Many others, like us prefer to always build their own boxes. Many open-source
projects and individual developers host their Vagrantfile configurations and
associated files (like provisioning scripts) on GitHub. These repositories allow
others to easily replicate their development or testing environments.

We want to consolidate and canonicalize building of vagrant base boxes to avoid
duplication and to improve quality of the boxes.

For Debian, https://github.com/rgl/debian-vagrant provides a number of base
boxes. Much of /bisos.vagrantBaseBoxes/ is based on that but our general data
driven approach is different.


* Strategy of Separating bisos.vagrantBaseBoxes Package From Its Data (packer base box specifications)

/bisos.vagrantBaseBoxes/ is data driven. By itself it is incomplete. It operates on
well structured directories which contain packer base box specifications.

The strategy of separating bisos.vagrantBaseBoxes package from its data targets has two goals:

1) The end result of being able to build a particular VM Box for a specific OS
   (debian, ubuntu, etc) with specific configurations (netinst, desktop, etc) for specific
   providers (qemu, vmware, etc) should be oriented towards the user of that image
   --- not the providers that wish to produce multi-configurations and
   multi-provider images.

2) The bisos.vagrantBaseBoxes and the structure of organization of packer base
   box specifications should be complete so that this model can become a basis
   of convergence for all similar such efforts. Those wishing to add more OSes and
   more providers should be able to plug their specifications into our model.

We expand on our strategy for accomplishing the above goals below.

** User Orientation Strategy

Someone wishing to build a box for say, qemu+debian-13+netinst+us should be able to
run bisos.vagrantBaseBoxes on a base box specification dedicated to that
specific profile. Without any additional complexities that come from the
conveniences of the producer of the multi-environment base box specification.

For the example of qemu+debian-13+netinst+us, consider the content of:\
https://github.com/bxObjects/bro_vagrantDebianBaseBoxes/tree/main/qemu/debian/13/trixie/amd64/netinst

The us.pkr.hcl file is a symlink to:\
../../../../../../poly/debian/13/netinst/13.trixie-netinst_us.pkr.hcl
which points to the base for multi-configuration of this specific base box specification.

The management of the relative symlinks and execution of the build process is wrapped in:\
https://github.com/bxObjects/bro_vagrantDebianBaseBoxes/blob/main/qemu/debian/13/trixie/amd64/netinst/vagBox.cs

vagBox.cs is a planted CS (Command Service) whose seed is bisos.vagrantBaseBoxes's vagrantBoxProc.cs.

** Framework for Consolidation of Base Boxes Strategy

Using again, the example of qemu+debian-13+netinst+us, consider the directory:\
https://github.com/bxObjects/bro_vagrantDebianBaseBoxes/tree/main/qemu/debian/13/trixie/amd64/netinst

in https://github.com/bxObjects/bro_vagrantDebianBaseBoxes
which is dedicated to Vagrant Debian BaseBoxes.

Notice the hierarchies of "qemu/debian/13/trixie/amd64/netinst" and "poly/debian/13/netinst".

The "poly/debian/13/netinst" is multi-environment convenience of the developer and contains the symlink destinations
of "qemu/debian/13/trixie/amd64/netinst".

Notice the hierarchy of "qemu/debian/13/trixie/amd64/netinst/us.pkr.hcl" corresponding to:\
<provider>/<distro>/<majorRelease>/<minorRelease>/<cpuArch>/<boxType>/<boxSelector>

Based on the above generalized hierarchy, other base boxes of any type and any
shape can be created.

Hence, the combination of the above generalized hierarchy and the
bisos.vagrantBaseBoxes package provide a foundation for convergence and
consolidation of buildable vagrant base boxes.


** BISOS Vagrant Debian Base Boxes Packer Specifications


In BISOS, the packer base box specifications are in the form of a
BISOS Repo Object (BRO). The github url for the BRO is:

In BISOS, the defaults are:

#+begin_src bash
cd /bisos/git/bxRepos/bxObjects
git clone https://github.com/bxObjects/bro_vagrantDebianBaseBoxes.git
#+end_src

Of course, you can clone that repo anywhere (the /bisos/git/bxRepos/bxObjects is
BISOS specific) and then just adjust the command line path to it when running
vagrantBoxProc.cs.


* Installation of bisos.vagrantBaseBoxes Package

The sources for the bisos.vagrantBaseBoxes pip package are maintained at:
https://github.com/bisos-pip/vagrantBaseBoxes.

The bisos.vagrantBaseBoxes pip package is available at PYPI as
https://pypi.org/project/bisos.vagrantBaseBoxes

You can install bisos.vagrantBaseBoxes with pip or pipx.

** Installation With pip

If you need access to bisos.vagrantBaseBoxes as a python module, you can install it with pip:

#+begin_src bash
pip install bisos.vagrantBaseBoxes
#+end_src

See below for this packages list of commands.

** Installation With pipx

If you only need access to bisos.vagrantBaseBoxes on command-line, you can install it with pipx:

#+begin_src bash
pipx install bisos.vagrantBaseBoxes
#+end_src

The following commands are made available:
- vagrantBaseBoxes-sbom.cs  (Software Bill of Material for vagrant and packer)
- vagrantBoxProc.cs  (The primary command line for building, adding, running and cleaning base boxes.)\
                     (Also a seed for vagBox.cs)
- exmpl-vagBox.cs    (Example for planting based on the vagrantBoxProc.cs as seed.)
- vagrantCommonCmnds.cs  (A cheat sheet for common vagrant commands.)

* Usage of bisos.vagrantBaseBoxes Package

** First Install the packer box specifications.

Clone the packer box specifications somewhere. Perhaps in your home directory.

#+begin_src bash
git clone https://github.com/bxObjects/bro_vagrantDebianBaseBoxes.git
#+end_src

For BISOS we use the /bisos/git/bxRepos/bxObjects canonical directory as a base for cloning bro_vagrantDebianBaseBoxes.


** vagrantBoxProc.cs Menu

Run:

#+begin_src bash
vagrantBoxProc.cs
#+end_src

Without any parameters and arguments, vagrantBoxProc.cs gives you a menu of
common invokations.


** Build, Add, Run and then Clean All Base Boxes with vagrantBoxProc.cs

Run:

#+begin_src bash
find  /bisos/git/bxRepos/bxObjects/bro_vagrantDebianBaseBoxes/qemu -print | grep pkr.hcl |  vagrantBoxProc.cs --force="t"  -i vagBoxPath_buildAddRun
#+end_src

That will build, then add the boxes and then do a vagrant up on each of pkr.hcl files in the bro_vagrantDebianBaseBoxes/qemu directory hierarchy.

Next verify that all the boxes have been built properly by visiting them as VMs.

To clean them all -- get rid of the build artifacts and vagrant destroy the machines -- run:

#+begin_src bash
find  /bisos/git/bxRepos/bxObjects/bro_vagrantDebianBaseBoxes/qemu -print | grep pkr.hcl |  vagrantBoxProc.cs --force="t"  -i vagBoxPath_clean
#+end_src

** Build, Add, Run and then Clean a Specific Base Box with vagBox.cs (a planted vagrantBoxProc.cs seed)

Go to:

#+begin_src bash
cd /bisos/git/bxRepos/bxObjects/bro_vagrantDebianBaseBoxes/qemu/debian/13/trixie/amd64/netinst
#+end_src

In there run:

#+begin_src bash
vagBox.cs
#+end_src

vagBox.cs gives you a menu of common invokations.

To Build, Add and Run just the us.pkr.hcl box, execute:

#+begin_src bash
vagBox.cs --force="t"  -i vagBoxPath_buildAddRun us.pkr.hcl
#+end_src

Next verify that your specific box has been built properly by visiting it as a VM.

To clean it -- git rid of the build artifacts and vagrant destroy the machines -- run:

#+begin_src bash
vagBox.cs --force="t"  -i vagBoxPath_clean us.pkr.hcl
#+end_src

* BISOS Use of Built Vagrant Boxes

In BISOS, we start from a Debian Vagrant Box which we consider as "fresh Debian" and we augment it to
to become "Raw-BISOS". This process is described in: https://github.com/bxgenesis/start

Based on a platform BPO (ByStar Portable Object), Raw-BISOS can then be further augmented to become a
reproducible specific BISOS-Platform.

* Support

For support, criticism, comments, and questions, please contact the
author/maintainer\\
[[http://mohsen.1.banan.byname.net][Mohsen Banan]] at:
[[http://mohsen.1.banan.byname.net/contact]]


* Planned Improvements

- Fully absorb all of lcaVagrantXX.sh

# Local Variables:
# eval: (setq-local toc-org-max-depth 4)
# End:
